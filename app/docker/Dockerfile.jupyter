# Use a CUDA base image for GPU support
FROM nvidia/cuda:11.2.2-base-ubuntu20.04

LABEL maintainer="Akin Wilson <akinola.antony.wilson@gmail.com>"


RUN apt-get update && apt-get install -y python3

# Switch to root user for package installation
USER root

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    git 

# Add Node.js repository and install
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Install system dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    zsh \
    fonts-powerline \
    python3-pip \
    python3-dev \
    python3-venv \
    texlive-latex-extra \
    texlive-fonts-recommended \
    dvipng \
    cm-super \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgl1 \
    libsm6 \
    libxext6 \
    libxrender1 \
    ffmpeg \
    tmux \
    wget \
    sqlite3 \
    portaudio19-dev \
    libasound2-dev  \
    # nodejs \
    # npm \
    && rm -rf /var/lib/apt/lists/*

# tmux config 
RUN git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
RUN curl -o ~/.tmux.conf https://raw.githubusercontent.com/akinwilson/configs/refs/heads/main/configs/tmux.conf


# Install speedtest-cli
RUN pip3 install --no-cache-dir speedtest-cli


# Install lsb-release and Terraform
RUN apt-get update && apt-get install -y lsb-release curl gpg \
    && curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update && apt-get install -y terraform \
    && rm -rf /var/lib/apt/lists/*



# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && chmod +x kubectl \
    && mv kubectl /usr/local/bin/kubectl


# Install pyenv
RUN curl -fsSL https://pyenv.run | bash \
    && echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc \
    && echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc \
    && echo 'eval "$(pyenv init --path)"' >> ~/.bashrc \
    && echo 'eval "$(pyenv init -)"' >> ~/.bashrc

# Create jupyter user with home directory
RUN useradd -m -s /bin/bash jupyter
RUN chown -R jupyter:jupyter ~/.tmux


# Install Oh My Zsh for the jupyter user
USER jupyter
WORKDIR /home/jupyter


# Install Oh My Zsh
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

# Ensure the $ZSH environment variable is set
RUN echo 'export ZSH="$HOME/.oh-my-zsh"' >> ~/.bashrc

# Source oh-my-zsh.sh in .bashrc
RUN echo 'source $ZSH/oh-my-zsh.sh' >> ~/.bashrc

# Set up environment
ENV SHELL=/bin/bash
ENV LANG=C.UTF-8
ENV PATH="/home/jupyter/.local/bin:${PATH}"

# Configure Oh My Zsh theme and plugins
RUN sed -i 's/ZSH_THEME=.*/ZSH_THEME="agnoster"/' ~/.zshrc && \
    sed -i 's/plugins=.*/plugins=(git python docker vi-mode)/' ~/.zshrc

# Switch back to root for system-wide installations
USER root

RUN mkdir -p "$HOME/.ipython/profile_default/startup" \
    && wget -O "$HOME/.ipython/profile_default/startup/00-supress-warnings-print-all.py" \
       https://raw.githubusercontent.com/akinwilson/configs/refs/heads/main/configs/00-supress-warnings-print-all.py


# Upgrade pip
RUN pip3 install --upgrade pip
RUN pip3 install --upgrade pip setuptools
# Install Python packages system-wide

# Install core packages
RUN pip3 install --no-cache-dir \
    torch \
    torchaudio \
    pytorch-lightning \
    tensorflow \
    xgboost \
    minio \
    kubernetes \
    kfp

# Install JupyterLab and extensions
RUN pip3 install --no-cache-dir \
    jupyterlab \
    jupyterlab-lsp \
    'python-lsp-server[all]' \
    jupyterlab-git \
    ipywidgets \
    matplotlib \
    tqdm \
    scikit-learn \
    numpy \
    opencv-python-headless \
    transformers

RUN pip3 install --no-cache-dir \
    torch-scatter \
    torch-sparse \
    torch-cluster \
    torch-spline-conv \
    torch-geometric

RUN pip3 install --no-cache-dir \
    ipykernel \
    tensorboard \
    jupyterlab \
    # neo4j \
    # sentencepiece \
    # jupyter_nbextensions_configurator \
    # jupyter-http-over-ws \
    widgetsnbextension \
    # django-prometheus \
    # pyaudio \
    # dask \
    # torchinfo \
    fbgemm_gpu --index-url https://download.pytorch.org/whl/cu121 \
    torchmetrics \
    torchrec --index-url https://download.pytorch.org/whl/cu121



# Install Jupyter widgets extension
# RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager

# Configure matplotlib to use LaTeX fonts
RUN mkdir -p ~/.config/matplotlib && \
    echo "font.family: serif" > ~/.config/matplotlib/matplotlibrc && \
    echo "font.serif: Times New Roman" >> ~/.config/matplotlib/matplotlibrc && \
    echo "text.usetex: True" >> ~/.config/matplotlib/matplotlibrc

# Jupyter configuration
RUN mkdir -p ~/notebooks && \
    echo "c.ServerApp.root_dir = '/home/jupyter/notebooks'" > ~/jupyter_server_config.py

# Expose JupyterLab port
EXPOSE 8888

# Default command to run JupyterLab
CMD ["jupyter", "lab", \
    "--ip=0.0.0.0", \
    "--port=8888", \
    "--no-browser", \
    "--ServerApp.token=''", \
    "--ServerApp.password=''", \
    "--allow-root", \
    "--ServerApp.base_url=/jupyter", \
    "--ServerApp.allow_origin='*'"]