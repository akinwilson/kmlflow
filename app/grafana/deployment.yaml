apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-sa
  namespace: monitoring
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      serviceAccountName: monitoring-sa
      containers:
        - name: grafana
          image: grafana/grafana:latest
          securityContext:  # Only for debugging
            runAsUser: 0  
          ports:
            - containerPort: 3000
          env:
            - name: GF_SERVER_ROOT_URL
              value: "http://192.168.49.2/grafana/"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: "true"
            - name: GF_SECURITY_SKIP_VERIFY
              value: "true" 
            - name: GF_PATHS_PROVISIONING  # Ensure provisioning settings are read
              value: "/etc/grafana/provisioning"
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-dashboards
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
              readOnly: true
            - mountPath: /etc/grafana/provisioning/dashboards
              name: grafana-dashboard-providers
              readOnly: true
        - name: grafana-watcher  # Sidecar container
          image: kiwigrid/k8s-sidecar:latest
          env:
            - name: LABEL
              value: "grafana_dashboard"  # Watches ConfigMaps with this label
            - name: FOLDER
              value: "/var/lib/grafana/dashboards"
            - name: NAMESPACE
              value: "monitoring"
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-dashboards
          emptyDir: {}  # Temporary storage for dynamically loaded dashboards
        - name: grafana-dashboard-providers
          configMap:
            name: grafana-dashboard-providers
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /grafana/$2
    nginx.ingress.kubernetes.io/use-regex: "true" 
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path:  /grafana(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: grafana
                port:
                  number: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring  # Replace with your namespace
  labels:
    grafana_datasource: "1"
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.monitoring.svc.cluster.local:9090/prometheus  # Updated URL
        isDefault: true
        version: 1
        editable: false