apiVersion: v1
kind: ServiceAccount 
metadata:
  name: mlflow-sa 
  namespace: mlflow 
---
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: mlflow-deployment 
  namespace: mlflow 
  labels:
    app: mlflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow 
  template:
    metadata:
      labels:
        app: mlflow 
    spec:
      serviceAccountName: mlflow-sa

      volumes:
      - name: mlflow-data
        hostPath:
          path: /data/

      containers:
      - name: mlflow
        image: akinolawilson/mlflow:latest
        imagePullPolicy: Always 
        # command: ["/bin/bash"]
        # args:
        #   ["--host 0.0.0.0 --port 5001 --backend-store-uri sqlite:///meta.db"] # --artifacts-destination s3://my-bucket 
        ports:
          - containerPort: 5001
            
        volumeMounts:
        - name: mlflow-data
          mountPath: /usr/src/app

        # persistentVolumeClaim:
        #   claimName: mlflow-pvc
# See https://mlflow.org/docs/latest/tracking/server.html for configuration details 

# --backend-store-uri sqlite:///meta.db creates meta data database locally under current working directory called 'meta/db' 

# --artifacts-destination s3://my-bucket  will use my-bucket as remote storage. MLFLow server will then act as a proxy for accessing the artifacts 
#  W/O specifying this flag, artifacts are store locally under current working directory in folder './mlartifacts'
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: mlflow-volume
#   namespace: mlflow
#   labels:
#     app: mlflow
# spec:
#   storageClassName: standard
#   accessModes:
#     - ReadWriteOnce
#   capacity:
#     storage: 20Gi
#   hostPath:
#     path: /
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mlflow-pvc
# spec:
#   volumeName: mlflow-pvc
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
#   selector: # <----- here
#     matchLabels:
#       app: "mlflow"
